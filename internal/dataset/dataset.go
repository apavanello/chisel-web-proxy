package dataset

import (
	"encoding/json"
	"flag"
	"fmt"
	"io/ioutil"
	"log"
	"os"
)

// Generated by https://quicktype.io

type Data struct {
	Servers []Servers `json:"Servers"`
}

type Servers struct {
	Name        string       `json:"name"`
	Connections []Connection `json:"connections"`
}

type Connection struct {
	Env          string `json:"env"`
	ChiselServer string `json:"chiselServer"`
	Value        string `json:"value"`
}

var dbs Data

func readJsonFromDisk() string {

	var datasetFile string

	flag.StringVar(&datasetFile, "dataset", "dataset.json", "Dataset JSON file")
	flag.Parse()

	datasetFileCheck(datasetFile)

	file, err := ioutil.ReadFile(datasetFile)
	if err != nil {
		log.Fatal(err)
	}
	return string(file)

}

//Json to struct
func LoadDataset() {

	str := readJsonFromDisk()
	err := json.Unmarshal([]byte(str), &dbs)
	if err != nil {
		log.Fatal(err)
	}

}

func GetEnv() map[string]bool {

	envs := make(map[string]bool)

	for _, server := range dbs.Servers {
		for _, conn := range server.Connections {
			envs[conn.Env] = true
		}
	}

	return envs
}

func GetHosts(env string) map[string]bool {

	hosts := make(map[string]bool)

	for _, server := range dbs.Servers {
		for _, conn := range server.Connections {
			if conn.Env == env {
				hosts[server.Name] = true
			}
		}
	}
	return hosts
}

func GetConnString(env string, host string) (remote string, cSRV string) {

	for _, server := range dbs.Servers {
		for _, conn := range server.Connections {
			fmt.Println(env, host)
			if conn.Env == env && server.Name == host {
				fmt.Println("found env:", env, "host:", host)
				return conn.Value, conn.ChiselServer
			}
		}
	}
	return "", ""
}

func datasetFileCheck(datasetFile string) {

	if _, err := os.Stat(datasetFile); err != nil {
		if os.IsNotExist(err) {
			log.Fatal("Dataset file (" + datasetFile + ") not found \n use -dataset flag to specify the dataset file")
		}
	}
	log.Default().Println("Dataset file: " + datasetFile + " loaded")

}
